/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.awt.Color;

import model.GOITAP;
import DAO.GoiTapDAO;
import controller.CurrencyUtils;
import java.sql.Date;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
public class GoiTapForm extends javax.swing.JPanel {

    private DefaultTableModel tblModel;
    private ArrayList<GOITAP> gt;
    public GoiTapForm() {
        UIManager.put("Table.showVerticalLines", true);
        initComponents();
        setSize(860, 760);
        setBackground(new Color(255, 239, 237));
        jTable1.setDefaultEditor(Object.class, null);
        initTable();
        gt = GoiTapDAO.getInstance().selectAll();
        loadDataToTable(gt);
    }
    public final void initTable() {
        tblModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        String[] headerTbl = new String[]{"Mã gói tập", "Tên gói tập", "Mô tả", "Giá tiền"};
        tblModel.setColumnIdentifiers(headerTbl);
        jTable1.setModel(tblModel);
    }

    public void loadDataToTable(ArrayList<GOITAP> gtList) {
        tblModel.setRowCount(0); 
        for (GOITAP gt : gtList) {
            tblModel.addRow(new Object[]{
                gt.getId_GT(), gt.getTenGoi(), gt.getMoTa(), CurrencyUtils.formatCurrency(gt.getGiaTien())
            });
        }
    }
    
    public void refreshTableData() {
        ArrayList<GOITAP> gtList = GoiTapDAO.getInstance().selectAll(); // Gọi hàm lấy tất cả khách hàng không bị xóa
        loadDataToTable(gtList); // Nạp dữ liệu vào bảng
    }
    private GOITAP getGoiTapSelect() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            return null;
        }
        String Id_GT = jTable1.getValueAt(selectedRow, 0).toString();
        String TenGoi = jTable1.getValueAt(selectedRow, 1).toString();
        String MoTa = jTable1.getValueAt(selectedRow, 2).toString();
        String GiaTienStr =  jTable1.getValueAt(selectedRow, 3).toString();
        
        double giaTien = 0;
        try {
            giaTien = CurrencyUtils.parseCurrency(GiaTienStr);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        
        return new GOITAP(Id_GT, TenGoi, MoTa, giaTien);
    }
    private void refreshTable() {
        ArrayList<GOITAP> gt = GoiTapDAO.getInstance().selectAll();
        loadDataToTable(gt);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TextTimKiem = new javax.swing.JTextField();
        labelSearch = new javax.swing.JLabel();
        labelInsert = new javax.swing.JLabel();
        labelDelete = new javax.swing.JLabel();
        labelUpdate = new javax.swing.JLabel();
        labelReset = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        TextTimKiem.setText("Tìm kiếm ...");
        TextTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextTimKiemFocusGained(evt);
            }
        });
        TextTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextTimKiemKeyReleased(evt);
            }
        });

        labelSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/ic_Search.png"))); // NOI18N

        labelInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/ic_Insert.png"))); // NOI18N
        labelInsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelInsertMouseClicked(evt);
            }
        });

        labelDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/ic_Delete.png"))); // NOI18N
        labelDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelDeleteMouseClicked(evt);
            }
        });

        labelUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/pencil (1) (1).png"))); // NOI18N
        labelUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelUpdateMouseClicked(evt);
            }
        });

        labelReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/ic_Update.png"))); // NOI18N
        labelReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelResetMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("                                              Danh sách gói tập");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(TextTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSearch)
                .addGap(56, 56, 56)
                .addComponent(labelInsert)
                .addGap(65, 65, 65)
                .addComponent(labelDelete)
                .addGap(72, 72, 72)
                .addComponent(labelUpdate)
                .addGap(54, 54, 54)
                .addComponent(labelReset)
                .addContainerGap(122, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelInsert, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelDelete, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelReset, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelUpdate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelSearch)
                    .addComponent(TextTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void TextTimKiemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextTimKiemFocusGained
        if(TextTimKiem.getText().equals("Tìm kiếm ..."))
            TextTimKiem.setText("");
    }//GEN-LAST:event_TextTimKiemFocusGained

    private void TextTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextTimKiemKeyReleased
        String searchText = TextTimKiem.getText().trim().toLowerCase();
     
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) jTable1.getModel());
        jTable1.setRowSorter(sorter);
        
        RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter("(?i)" + searchText); 
        sorter.setRowFilter(rowFilter);
    }//GEN-LAST:event_TextTimKiemKeyReleased

    private void labelResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelResetMouseClicked
            refreshTable();
    }//GEN-LAST:event_labelResetMouseClicked

    private void labelDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelDeleteMouseClicked
        if (jTable1.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn gói tập cần xóa!");
        } 
        else {
        GOITAP select = getGoiTapSelect();
        int chk = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa gói tập này?", "Xác nhận xóa gói tập", JOptionPane.YES_NO_OPTION);
        
        if (chk == JOptionPane.YES_OPTION) {
            
                int res = GoiTapDAO.getInstance().delete(select);
                if (res > 0) {
                    JOptionPane.showMessageDialog(this, "Xóa gói tập thành công!");
                        // Tải lại danh sách gói tập trên table
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.removeRow(jTable1.getSelectedRow());
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa gói tập thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            
        }
        }
    }//GEN-LAST:event_labelDeleteMouseClicked

    private void labelInsertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelInsertMouseClicked
        addGoiTap add = new addGoiTap(this);
        add.setVisible(true);
    }//GEN-LAST:event_labelInsertMouseClicked

    private void labelUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelUpdateMouseClicked
        GOITAP select = getGoiTapSelect();
        if (select != null) {
            updateGoiTap update = new updateGoiTap(select, this);
            update.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng để chỉnh sửa.", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }    }//GEN-LAST:event_labelUpdateMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelDelete;
    private javax.swing.JLabel labelInsert;
    private javax.swing.JLabel labelReset;
    private javax.swing.JLabel labelSearch;
    private javax.swing.JLabel labelUpdate;
    // End of variables declaration//GEN-END:variables
}
